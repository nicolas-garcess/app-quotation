doctype html
html(lang="es")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        link(rel="stylesheet", type="text/css" href="/css/styles.css")
        link(rel="stylesheet", type="text/css" href="/css/apartments.css")
        title Resultado de búsqueda
    body
        header  
            h1= message
        main
            div(class="main-up")
                div(class="results-quantity")
                    if reply.length > 1
                        h2(class="results-quantity__title") #{reply.length} resultados
                    else if reply.length == 1
                        h2(class="results-quantity__title") #{reply.length} resultado
                    else
                        h2(class="results-quantity__title") 0 resultados
                if reply.length != 0 
                    div(class="container-download")
                        form()
                            p Selecciona un tipo de archivo para generar el reporte
                            input(type="radio" name="file" class="csv-radio")
                            label CSV
                            input(type="radio" name="file" class="pdf-radio")
                            label PDF
                            input(type="button" value="Descargar" class="button-report send" data-array=reply)
            if value
                div(class="container-value results-quantity")
                    p(class="container-value__mean") El promedio del precio por metro cuadrado de los apartammentos de la zona es: #{value} €
            div(class="container-apartments")
                each apartment in reply 
                    div(class="apartment")
                        p(class="apartment__title")= apartment.Titulo
                        if apartment.Habitaciones
                            p(class="apartment__rooms") #{apartment.Habitaciones} habitaciones
                        else 
                            p(class="apartment__rooms") Habitaciones no especificadas
                        p(class="apartment__price") #{apartment.Precio} €
                        p(class="apartment__phone") Contacto: #{apartment.Telefonos}

            div(class="button")
                a(href="/" class="button__link") Regresar
        
        script.
            const download = document.querySelector(".button-report");            
            download.addEventListener('click', async (e) => {
                e.preventDefault() //- Evita que se refresque el sitio web
                const csv = document.querySelector('.csv-radio').checked;
                const pdf = document.querySelector('.pdf-radio').checked;
                
                if (csv || pdf) {
                    let fileName;
                    let fileType;

                    if (csv) {
                        fileName = "reporte.csv";
                        fileType = "csv"
                    } else {
                        fileName = "reporte.pdf";
                        fileType = "pdf"
                    }
                    let data = download.dataset.array;

                    fetch('/apartamentos/archivo', {
                        method: 'post',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({type: fileType, data: data}) 
                    })
                    .then(async res => ({
                            filename: fileName,
                            blob: await res.blob()
                        }))
                    .then(resObj => {
                        // It is necessary to create a new blob object with mime-type explicitly set for all browsers except Chrome, but it works for Chrome too.
                        const newBlob = new Blob([resObj.blob], { type: `application/${fileType}`});

                        // MS Edge and IE don't allow using a blob object directly as link href, instead it is necessary to use msSaveOrOpenBlob
                        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                            window.navigator.msSaveOrOpenBlob(newBlob);
                        } else {
                            // For other browsers: create a link pointing to the ObjectURL containing the blob.
                            const objUrl = window.URL.createObjectURL(newBlob);

                            let link = document.createElement('a');
                            link.href = objUrl;
                            link.download = resObj.filename;
                            link.click();

                            // For Firefox it is necessary to delay revoking the ObjectURL.
                            setTimeout(() => { window.URL.revokeObjectURL(objUrl); }, 250);
                        }
                    })
                    .catch((error) => {
                        console.log('DOWNLOAD ERROR', error);
                    });
                } else {
                    alert("Escoja un tipo de archivo correcto");
                }                         
            });
